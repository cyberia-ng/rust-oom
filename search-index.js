var searchIndex = JSON.parse('{\
"oom":{"doc":"Took inspirations from the \\\"Parse, don’t validate\\\" article.","i":[[3,"NonEmptySlice","oom","A non-empty slice type, counterpart of `&[T]`.",null,null],[3,"NonEmptyMutSlice","","A non-empty mutable slice type, counterpart of `&mut [T]`.",null,null],[3,"NonEmptyVec","","A non-empty vector type, counterpart of `Vec<T>`.",null,null],[11,"from_ref","","Converts a `&T` into a `NonEmptySlice`.",0,[[]]],[11,"from_slice","","Converts a `&[T]` into a `NonEmptySlice`.",0,[[]]],[11,"from_slice_checked","","Converts a `&[T]` into a `NonEmptySlice`. Returns `None`…",0,[[],["option",4]]],[11,"as_ptr","","Returns a raw pointer to the slice\'s buffer.",0,[[]]],[11,"as_slice","","Returns a `&[T]` containing entire `NonEmptySlice`.",0,[[]]],[11,"len","","Returns the number of elements in the slice.",0,[[],["nonzerousize",3]]],[11,"is_empty","","Always returns `false` because the slice is non-empty.",0,[[]]],[11,"first","","Returns the first element of the slice.",0,[[]]],[11,"last","","Returns the last element of the slice.",0,[[]]],[11,"split_first","","Returns the first and all the rest of the elements of the…",0,[[]]],[11,"split_last","","Returns the last and all the rest of the elements of the…",0,[[]]],[11,"from_mut","","Converts a `&T` into a `NonEmptyMutSlice`.",1,[[]]],[11,"from_slice","","Converts a `&[T]` into a `NonEmptyMutSlice`.",1,[[]]],[11,"from_slice_checked","","Converts a `&[T]` into a `NonEmptyMutSlice`. Returns…",1,[[],["option",4]]],[11,"as_ptr","","Returns a raw pointer to the slice\'s buffer.",1,[[]]],[11,"as_mut_ptr","","Returns an unsafe mutable pointer to the slice\'s buffer.",1,[[]]],[11,"as_slice","","Returns a `&[T]` containing entire `NonEmptyMutSlice`.",1,[[]]],[11,"as_mut_slice","","Returns a mutable slice from this type.",1,[[]]],[11,"len","","Returns the number of elements in the slice.",1,[[],["nonzerousize",3]]],[11,"is_empty","","Always returns `false` because the slice is non-empty.",1,[[]]],[11,"first","","Returns the first element of the slice.",1,[[]]],[11,"first_mut","","Returns a mutable pointer to the first element of the slice.",1,[[]]],[11,"last","","Returns the last element of the slice.",1,[[]]],[11,"last_mut","","Returns the last element of the slice.",1,[[]]],[11,"split_first","","Returns the first and all the rest of the elements of the…",1,[[]]],[11,"split_first_mut","","Returns the first and all the rest of the elements of the…",1,[[]]],[11,"split_last","","Returns the last and all the rest of the elements of the…",1,[[]]],[11,"split_last_mut","","Returns the last and all the rest of the elements of the…",1,[[]]],[11,"from_vec","","Converts a `Vec<T>` into a `NonEmptyVec`.",2,[[["vec",3]]]],[11,"from_vec_checked","","Converts a `Vec<T>` into a `NonEmptyVec`. Returns passed…",2,[[["vec",3]],[["vec",3],["result",4]]]],[11,"as_ptr","","Returns a raw pointer to the vector\'s buffer.",2,[[]]],[11,"as_mut_ptr","","Returns an unsafe mutable pointer to the vector\'s buffer.",2,[[]]],[11,"as_nonempty_slice","","Returns a non-empty slice from this vec.",2,[[],["nonemptyslice",3]]],[11,"as_nonempty_mut_slice","","Returns a non-empty mutable slice from this vec.",2,[[],["nonemptymutslice",3]]],[11,"as_slice","","Extracts a slice containing the entire vector.",2,[[]]],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",2,[[]]],[11,"len","","Returns the number of elements in the vector.",2,[[],["nonzerousize",3]]],[11,"is_empty","","Always returns `false` because the vector is non-empty.",2,[[]]],[11,"capacity","","Returns the number of elements the vector can hold without…",2,[[],["nonzerousize",3]]],[11,"into_vec","","Converts `self` into a vector without clones or allocations.",2,[[],["vec",3]]],[11,"to_vec","","Copies `self` into a new `Vec`.",2,[[],["vec",3]]],[11,"first","","Returns the first element of the slice.",2,[[]]],[11,"first_mut","","Returns a mutable pointer to the first element of the slice.",2,[[]]],[11,"last","","Returns the last element of the slice.",2,[[]]],[11,"last_mut","","Returns the last element of the slice.",2,[[]]],[11,"split_first","","Returns the first and all the rest of the elements of the…",2,[[]]],[11,"split_first_mut","","Returns the first and all the rest of the elements of the…",2,[[]]],[11,"split_last","","Returns the last and all the rest of the elements of the…",2,[[]]],[11,"split_last_mut","","Returns the last and all the rest of the elements of the…",2,[[]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"eq","","",0,[[]]],[11,"eq","","",1,[[]]],[11,"eq","","",2,[[]]],[11,"cmp","","",0,[[],["ordering",4]]],[11,"cmp","","",1,[[],["ordering",4]]],[11,"cmp","","",2,[[],["ordering",4]]],[11,"partial_cmp","","",0,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",2,[[],[["option",4],["ordering",4]]]],[11,"as_ref","","",0,[[]]],[11,"as_ref","","",1,[[]]],[11,"as_ref","","",2,[[]]],[11,"clone","","",0,[[]]],[11,"clone","","",2,[[]]]],"p":[[3,"NonEmptySlice"],[3,"NonEmptyMutSlice"],[3,"NonEmptyVec"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);